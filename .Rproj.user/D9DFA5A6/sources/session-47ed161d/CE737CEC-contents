library(tibble)
library(igraph)
library(fpc) # for best number of cluster
library(cluster) # pam cluster
source("/NFS_home/NFS_home_2/chengxj/ST_scRNAseq/Code/visualization.R")
source("/NFS_home/NFS_home_2/chengxj/ST_scRNAseq/Code/unit.R")
#
setClass(Class = "BounFea",
         slot = list(bountype = "vector",
                     bounclass = "list",
                     Genediff = "list",
                     Feadiff = "list"))
CaladjMoranUnit <- function(x,
                         w.mtr,
                         verbose = T){
  n <- length(x)
  if (n != ncol(w.mtr)) {
    stop("objects of different length")
  }
  if (n < 2){
    I <- 0
  } else{
    m <- x - mean(x)
    W <- sum(w.mtr)
    #Z <- matrix(m,nrow = n)%*%matrix(m,ncol = n)
    Z <- matrix(NA, nrow = n, ncol = n)
    for(i in 1:n){
      for(j in 1:n){
        Z[i, j] <- (m[i] + m[j])^2
      }
    }
    I <- (1/W)*(sum((w.mtr*Z)))
  }
  return(I)
}
CalEntropy <- function(x, tofreq = T){
  if (is.factor(x)){
    x <- as.character(x)
  }
  if ( tofreq ){
    freq <- table(x)/length(x)
    freq <- as.data.frame(freq)[, 2]
  }
  if (length(x) ==1){
    entropy <- 0
  }else{
    entropy <- -sum(freq*log(freq))
  }
  return(entropy)
}
FiltConnectGraph <- function(st_pos,
                             nei.dist,
                             spot_class = NULL,
                             min.spots = 8,
                             min.class.pt = 0,
                             max.class.pt = 0){
  if (nrow(st_pos) < min.spots) {
    keep_g <- NULL
  } else {
    d <- FindNeispots(st_pos,
                      r.dist = nei.dist,
                      return.list = F)
    g <- graph_from_data_frame(d = d,
                               vertices = data.frame(name = rownames(st_pos)))
    comp <- components(g)$membership
    comp <- split(names(comp), comp)
    keep_g <- comp[sapply(comp, length) >= min.spots]
    if (! is.null(spot_class)){
      spot_class <- as.factor(spot_class)
      class_pt <- lapply(keep_g, function(x){
        table(spot_class[x])/length(x)})
      keep_g <- keep_g[lapply(class_pt, max) <= max.class.pt]
      keep_g <- keep_g[lapply(class_pt, min) >= min.class.pt]
    }
  }
  return(keep_g)
}

TedgeScore <- function(ES,
                       st_pos,
                       cluster = NULL,
                       r.dist = 2,
                       norm01 = F){
  # ES : tumor or tumor feature aboundance
  names(ES) <- rownames(st_pos)
  reg.lt <- FindNeispots(st_pos,
                         r.dist = r.dist,
                         cluster = NULL,
                         return.list = T)
  reg.lt <- reg.lt[names(ES)]
  I.score <- foreach(i = reg.lt, .combine = "c") %do%{
    D <- 1/as.matrix(dist(st_pos[i,]))
    diag(D) <- 0
    unit_I <- CaladjMoranUnit(x = ES[i],
                              w.mtr = D)
    return(unit_I)
  }
  I.score <- log2(1 + I.score)
  if (! is.null(cluster)){
    cluster <- as.character(cluster)
    names(cluster) <- rownames(st_pos)
    range <- foreach(i = reg.lt, .combine = "c") %do%{
      # en <- CalEntropy(x = cluster[i],
      #                  tofreq = T)
      clu.es <- tapply(ES[i], cluster[i], mean)
      #log2(1 + (max(clu.es) - min(clu.es))/(max(clu.es) + 0.5))
      (max(clu.es) - min(clu.es))/exp(2*min(clu.es))
    }
  } else{
    range <- foreach(i = reg.lt, .combine = "c") %do%{
      es <- sort(ES[i], decreasing = T)
      if (length(es) > 2){
        up.es <- mean(es[1:2])
        low.es <- mean(es[length(es)-1:length(es)])
        d <- (up.es - low.es)/exp(2*min(low.es))
      } else{
        d <- 0
      }
      return(d)
    }
  }
  # edge.score <- I.score * entropy
  edge.score <- apply(cbind(I.score, range), 1, function(x)exp(mean(log(x))))
  if (norm01) {
    edge.score <- Norm01(edge.score)
  }
  names(edge.score) <- names(ES)
  return(edge.score)
}
EdgeReg <- function(st_pos,
                    cluster,
                    subsample = F,
                    min.spots = 5,
                    r.dist = 2){
  spot.neighbor <- SpotNeigh(st_pos, nei.dist = r.dist)
  edgespots <- cbind(spot.neighbor,
                     spot1.type = cluster[spot.neighbor$spot1],
                     spot2.type = cluster[spot.neighbor$spot2]) %>%
    subset(spot1.type != spot2.type)
  # remove separate spots
  edgespots[, "comb"] <- apply(edgespots[, 4:5], 1, function(x){
    paste(sort(x), collapse = ":")
    })
  edgespots <- aggregate(edgespots[, 1:2],
                         by = list(edgespots$comb),
                         unlist) %>%
    column_to_rownames("Group.1")
  edgespots[,c("reg1", "reg2")] <- str_split_fixed(rownames(edgespots), ":", 2)
  edgeReg <- list()
  for (i in rownames(edgespots)) {
    spots <- cluster[unique(unlist(edgespots[i, 1:2]))]
    edgeReg[[i]]["reg1.spots"] <- list(names(spots[spots == edgespots[i, "reg1"]]))
    edgeReg[[i]]["reg2.spots"] <- list(names(spots[spots == edgespots[i, "reg2"]]))
  }
  # filter connectivity regions
  final.edgeReg <- list()
  invisible(sapply(names(edgeReg), function(i){
    reg <- edgeReg[[i]]
    min.num <- min(c(length(reg$reg1.spots), length(reg$reg2.spots)))
    if (min.num >= min.spots){
      spots <- SpotNeigh(st_pos[unlist(reg),], nei.dist = r.dist)
      spotclass = c(rep("reg1", length(reg$reg1.spots)),
                    rep("reg2", length(reg$reg2.spots)))
      g <- graph_from_data_frame(spots,
                                 directed = F,
                                 vertices = data.frame(name = unlist(reg), spotclass))
      comp <- components(g)$membership
      comp <- split(names(comp), comp)
      num <- 1
      for (k in 1:length(comp)){
        min.num <- min(table(as.character(cluster[comp[[k]]])))
        if (min.num >= min.spots) {
          #final.edgeReg[[paste0("edge_", i,".", num)]] <- comp[[k]]
          if (subsample) {
            final.edgeReg[[paste0("edge_", i,".", num)]] <<- subgraph_sample(comp[[k]], name.prex = NULL)
          } else {
            final.edgeReg[[paste0("edge_", i,".", num)]] <<- comp[[k]]
          }
          num = num + 1
        }
      }
    }
  }))
  return(final.edgeReg)
}
BounRegDefine <- function(x,
                     st_pos,
                     r.dist = 2,
                     maxval = 0.08,
                     minval = 0.03,
                     max.clu.pt = 0.75,
                     boun.nei.n = 2,
                     candi.step = 1,
                     max.iter.num = 20,
                     min.spots = 10,
                     connect.dist = 2,
                     edge.only = F,
                     verbose = T){
  if (is.null(names(x))) {
    names(x) <- rownames(st_pos)
  }
  if (verbose) {
    print("Identifing TNI spots from edge scores ...")
  }
  reg.lt <- FindNeispots(st_pos = st_pos,
                         r.dist = r.dist,
                         return.list = T)
  spotype <- ifelse(x > maxval,
                    "TNI",
                    ifelse(x < minval, "nTNI", "candi"))
  spotype <- factor(spotype, levels = c("TNI", "nTNI", "candi"))
  for (it in 1:max.iter.num){
    type.n.raw <- table(spotype)
    for (candi in names(spotype[spotype == "candi"])){
      nei.spots <- candi
      for (k in 1:candi.step) {
        nei <- unlist(reg.lt[nei.spots])
        nei.spots <- append(nei.spots,
                            nei[spotype[nei] != "nTNI"])
      }
      nei.spots <- unique(unlist(reg.lt[nei.spots]))
      boun.n <- sum(spotype[nei.spots] == "TNI")
      if (boun.n >= boun.nei.n) {
        spotype[candi] = "TNI"
      }
    }
    type.n.new <- table(spotype)
    if (all(type.n.raw == type.n.new)){
      break
    } else {
      type.n.raw = type.n.new
    }
  }
  spotype[spotype == "candi"] = "nTNI"
  if (verbose) {
    print("removing unconnected TNI regions ...")
  }
  # filter connected regions
  edgespots <- names(spotype)[spotype == "TNI"]
  if (length(edgespots) == 0) {
    warning("There is no spot defined as TNI!")
    final.edgespots = NULL
  } else {
    final.edgespots <- FiltConnectGraph(st_pos = st_pos[edgespots,],
                                        nei.dist = connect.dist,
                                        min.spots = min.spots)
    final.edgespots <- unname(unlist(final.edgespots))
    # plot
    if(verbose){
      print("Completing TNI identification!")
    }
  }
  if (edge.only) {
    return(final.edgespots)
  } else {
    alltype <- rep("nTNI", nrow(st_pos))
    names(alltype) <- rownames(st_pos)
    alltype[final.edgespots] <- "TNI"
    return(alltype)
  }
}
UnsupCluster <- function(x,
                         clu_num,
                         method){
  # cluster method is one of kmeans, hclust and pam
  if (! method %in% c("kmeans", "hclust", "pam")){
    stop("clustering method must be one of kmeans, hclust and pam")
  }
  if (method == "kmeans"){
      clu <- kmeans(x = x,
                    centers = clu_num,
                    iter.max = 20)
      groups <- clu$cluster
  }
  if (method == "hclust" ){
    d <- dist(x, method = "euclidean")
    fit <- hclust(d,
                  method ="ward.D")
    groups <- cutree(fit,
                     k = clu_num)
  }
  if (method == "pam"){
    pk <- pam(x,
              k = clu_num,
              metric = "euclidean")
    groups <- pk$clustering
  }
  return(groups)
  }


BounType <- function(boun.reg,
                     st_pos,
                     spot_label,
                     seed = 123,
                     type_n = NULL,
                     cluster_method = "pam",
                     nei.dist = 4,
                     connect.dist = 4,
                     min.type.spots = 0,
                     disconnect.spots = 3,
                     verbose = T){
  # add boundary width
  st_pos <- st_pos[boun.reg,]
  if (verbose) {
    message("Separating tumor boundary to different type according it's label composition of spot-neighbors")
  }
  spot_label <- as.factor(spot_label[boun.reg])
  # boundary consist of diff-clusters were separated
  nei.spots <- FindNeispots(st_pos,
                            r.dist = nei.dist,
                            return.list = T)
  clu.mt <- foreach(i = names(nei.spots), .combine = "rbind") %do% {
    te <- table(spot_label[nei.spots[[i]]])
    #min.c <- floor(length(nei.spots[[i]])/5)
    #te[te <= min.c] <- 0
    te <- te/sum(te)
    return(te)
  }
  rownames(clu.mt) <- names(nei.spots)
  if ( is.null(type_n)){
    set.seed(seed = seed)
    pamk.clu <- pamk(clu.mt)
    type_n <- pamk.clu$nc
    if (verbose) {
      message("pamk: best number of clusters is ", pamk.clu$nc)
    }
  }
  set.seed(seed = seed)
  type <- UnsupCluster(x = clu.mt,
                       clu_num = type_n,
                       method = cluster_method)
  # remove type with spots less than cutoff
  if (verbose) {
    message("Filtering short boundary type and remove discontinuous spots")
  }
  lt <- split(names(type), type)
  type <- lapply(lt, function(x){
    FiltConnectGraph(st_pos = st_pos[x, ],
                     nei.dist = connect.dist,
                     min.spots = disconnect.spots)
  })
  type <- type[lapply(type, length) >= min.type.spots]
  # names
  final.type <- foreach(n = 1:length(type),
                        .combine = "c") %do% {
                          x <- unlist(type[[n]])
                          setNames(object = rep(paste0("type_", n), length(x)),
                                   nm = x)
                          }
  return(final.type)
}
BounClass <- function(boun.type, spot.clu, ES){
  # tumor/high-tumor or non-tumor/low-tumor class
  types <- sort(unique(boun.type))
  types <- types[types != "others"]
  for (t in types) {
    t.boun.spots <- boun.type == t
    t.es.mean <- mean(ES[t.boun.spots])
    clu.mean <- tapply(ES[t.boun.spots], spot.clu[t.boun.spots], mean)
    boun.class <- ifelse(clu.mean[spot.clu[t.boun.spots]] > t.es.mean, "T_boun", "N_boun")
    boun.type[t.boun.spots] <- boun.class
    #names(boun.class) <- t.boun.spots
    # if(min(table(boun.class))/length(boun.class) < min.pt){
    #   return(boun.class)
    # }
  }
  return(boun.type)
}

