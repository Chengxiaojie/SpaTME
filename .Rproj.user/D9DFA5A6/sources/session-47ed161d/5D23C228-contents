# Thu Jun 29 19:57:06 2023
# Author:xiaojie Cheng
# Email: 2010825@tongji.edu.cn
# ---------------
# About project: pipeline
# load data

# preprocess
# calculating spatial features
#
source("/NFS_home/NFS_home_2/chengxj/ST_scRNAseq/Code/base.R")
source("/NFS_home/NFS_home_2/chengxj/ST_scRNAseq/Code/Se_preprocess.R")
source("/NFS_home/NFS_home_2/chengxj/ST_scRNAseq/Code/visualization.R")
source("/NFS_home/NFS_home_2/chengxj/ST_scRNAseq/Code/ST_features.2.R")
source("/NFS_home/NFS_home_2/chengxj/ST_scRNAseq/Code/LR_interaction.R")
source("/NFS_home/NFS_home_2/chengxj/ST_scRNAseq/Code/TN_interface.R")
source("/NFS_home/NFS_home_2/chengxj/ST_scRNAseq/Code/BayesSpace.R")
source("/NFS_home/NFS_home_2/chengxj/ST_scRNAseq/Code/pheno_program_NMF.R")
source("/NFS_home/NFS_home_2/chengxj/ST_scRNAseq/Code/unit.R")
source("/NFS_home/NFS_home_2/chengxj/ST_scRNAseq/Code/FeatureSelection.R")
source("/NFS_home/NFS_home_2/chengxj/ST_scRNAseq/Code/TLS_Score.R")
options(stringsAsFactors = F)
options(datatable.fread.datatable=FALSE)
# load data
Spatial.list <- readRDS("/NFS_home/NFS_home_2/chengxj/ST_scRNAseq/GSE175540/Temp_RDS/Spatial.list.RDS")
outdir <- "/NFS_home/NFS_home_2/chengxj/ST_scRNAseq/GSE175540/pipeline/"
#stf.lt <- list()
stf.lt <- readRDS(paste0(outdir, "stf.lt.rds"))
for (sam in names(Spatial.list)) {
  # coordinate information check for each ST samples
  # Spatial.list[[sam]] <- STcoordCheck(Spatial.list[[sam]],
  #                                     platform = "visium",
  #                                     hexagon.convert = T,
  #                                     hexagon.direct = "vertical",
  #                                     verbose = T)
  # create stf object with initial features
  cell.abun <- read.table(paste0("~/ST_scRNAseq/GSE175540/cell2location/ccRCC202212/", sam, "/", sam, ".cell.abundance.txt"),
                          sep = "\t",
                          header = T,
                          row.names = 1)
  colnames(cell.abun) <- substr(colnames(cell.abun), 24, nchar(colnames(cell.abun)))
  stf <- CreateStfObj(st = Spatial.list[[sam]],
                      #stf = stf.lt[[sam]],
                      assay = "SCT",
                      slot = "data",
                      cell.abun = cell.abun,
                      norm = T,
                      min.prop = 0.05,
                      init.fea = c("CellColocal"),
                      verbose = T
  )
  stf.lt[[sam]] <- stf
}
#saveRDS(Spatial.list, "/NFS_home/NFS_home_2/chengxj/ST_scRNAseq/GSE175540/Temp_RDS/Spatial.list.RDS")
# plot first three celltypes
colors <- LabelMapcolor(labels = colnames(stf.lt[[1]]@CellEnrich),
                        assgin.col = c("RCC" = "#ced4da"))

for (sam in names(Spatial.list)) {
  data <- stf.lt[[sam]]@CellEnrich
  data <- data/rowSums(data)
  data <- apply(data, 1, function(x){
    th <- sort(x, decreasing = T)[3]
    x[x < th] = 0
    return(x/sum(x))
  })
  data <- t(data)
  data <- round(data ,2)
  b = PlotCellSpot(decon_mtrx = data,
               st_pos = stf.lt[[sam]]@Position,
               pie_scale = 0.3,
               pie_color = colors,
               separate = F,
               e.color = "black",
               save = T,
               savefile = paste0(outdir, "/Cell_distribution/CellProp/", sam,"_cellprop.pdf"),
               p.width = 15,
               p.height = 14)
}
for ( sam in names(stf.lt)) {
  data <- stf.lt[[sam]]@CellEnrich
  PlotCellSpot(decon_mtrx = data,
               st_pos = stf.lt[[sam]]@Position,
               tarCells = colnames(data),
               separate = T,
               size.auto = T,
               size.factor = 0.36,
               numCol = 4,
               f.color = c("#0077b6","#fcefb4","#c32f27"),
               save = T,
               savefile = paste0(outdir, "/Cell_distribution/Cell_abundance/", sam,"_Cell_abundance.pdf"),
               p.width = 32,
               p.height = 40)
}
# correlation plot for cell abundance
for (sam in names(stf.lt)) {
  pdf(paste0(outdir, "/Cell_distribution/Cellabun_corrplot/", sam, "_cellabun_corrplot.pdf"), width = 6, height = 6)
  corrplot(corr = cor(stf.lt[[sam]]@CellEnrich, method = "spearman"),
           order="AOE",diag=FALSE,
           col = colorRampPalette(c("#013a63", "#0077b6", "white", "#a71e34","#6e1423"))(200),
           tl.col = "black")
  dev.off()
}
# co-distribution cell pairs enriched in TLS regions
# res <- PhenoAssoFeatures(data = t(stf.lt[[sam]]@CellColocal),
#                          phenotype = stf.lt[[sam]]@Annotation$TLS_anno,
#                          method = "wilcox",
#                          p.adj.cut = 1,
#                          p.adj = T)

sam = "GSM5924046_frozen_b_1"

# correlation
# calculating immune abundance and immune diversity
stf.lt <- readRDS("/NFS_home/NFS_home_2/chengxj/ST_scRNAseq/GSE175540/pipeline/stf.lt.rds")
celltypes <- sort(colnames(stf.lt[[1]]@CellEnrich))
names(celltypes) <- c("Plasma/B.cells", "T.cells", "T.cells", "T.cells", "T.cells", "Dendritic.cells", "Endothelial",
                      "Epithelial", "Epithelial", "Fibroblast",  "Mast", "Monocyte", "NK", "Dendritic.cells", "Pericyte",
                      "Plasma/B.cells", "Tumor", "Macrophage", "Macrophage", "T.cells")
immune.cells <- sort(c("Plasma/B.cells", "T.cells", "Dendritic.cells", "Macrophage", "Monocyte", "NK"))
for (sam in names(stf.lt)) {
  print(sam)
  data <- stf.lt[[sam]]@CellEnrich[, celltypes]
  data <- aggregate(t(data), by = list(names(celltypes)), sum) %>%
    tibble::column_to_rownames("Group.1")
  data <- t(data)
  data <- data[, immune.cells]
  # # immune abundance
  # imm.enrich <- rowSums(data)
  # # immune diversity
  # CellCodis <- CalCellCodis(data, sort = T)
  # imm.diver <- apply(CellCodis, 1, function(x){
  #   sum(x >= 0.1)
  # })
  # imm.diver <- imm.diver/ncol(CellCodis)
  # imm.diver <- round(imm.diver, 2)
  # stf.lt[[sam]]@Others <- list(data = data.frame(data, check.names = F),
  #                              CellCodis = data.frame(CellCodis, check.names = F),
  #                              imminf = data.frame(imm.enrich, imm.diver))
  stf.lt[[sam]]@Others[["Imm.infil"]] <- CalImmInfiltration(data, min.prop = 0.05)
  SpotVisualize(pos = stf.lt[[sam]]@Position,
                meta = stf.lt[[sam]]@Others$Imm.infil$Imm.enrichment,
                size = 3,
                title = "Immune enrichment",
                legend.name = "Score",
                p.width = 8, p.height = 8,
                legend.text = element_text(size=18),
                legend.title = element_text(size=20),
                savefile = paste0(outdir, "Immune.infil/", sam, "_imm.enrich.pdf"))
  SpotVisualize(pos = stf.lt[[sam]]@Position,
                meta = stf.lt[[sam]]@Others$Imm.infil$Imm.diversity,
                size = 3,
                title = "Immune diversity",
                legend.name = "Score",
                p.width = 8, p.height = 8,
                legend.text = element_text(size=18),
                legend.title = element_text(size=20),
                savefile = paste0(outdir, "Immune.infil/", sam, "_imm.diver.pdf"))
}


for (sam in names(stf.lt)) {
  savedir <- paste0(outdir, "Spot_features/", sam)
  if (! dir.exists(savedir)) {
    dir.create(savedir)
  }
  for(i in c("imprint.29sig", "LC.50sig", "imprint.65sig")){
    meta <- Norm01(stf.lt[[sam]]@GsetSig$CuratedSig$Immune$TLS[, i])
  #for (i in c("imm.enrich", "imm.diver")) {
  #meta <- stf.lt[[sam]]@Others$imminf[, i]
  #for(i in c("Plasma.cells_T.cells", "B.cells_T.cells", "B.cells_Dendritic.cells")){
   # meta <- stf.lt[[sam]]@Others$cellColocal[, i]
    SpotVisualize(pos = stf.lt[[sam]]@Position,
                  meta = meta,
                  savefile = paste0(savedir, "/", i ,".pdf"),
                  title = i,
                  p.width = 7, p.height = 7,
                  num.low = "#0077b6", num.mid = "lightyellow", num.high = "#c32f27")
  }
}
sam <- "GSM5924046_frozen_b_1"
data <- data.frame(stf.lt[[sam]]@Others$imminf,
                   group = Spatial.list[[sam]]@meta.data$TLSanno)
wilcox.test(data$imm.enrich ~ data$group)
# p-value < 2.2e-16
wilcox.test(data$imm.diver ~ data$group)
# p-value < 2.2e-16
data <- reshape2::melt(data)
pdf(paste0(outdir, "/Cell_distribution/", sam,"_boxplot_immnue_infiltration_inTLS.pdf"), width = 5, height = 4)
ggplot(data = data) +
  geom_boxplot(aes(x = variable, y = value, fill = group)) + theme_bw() +
  scale_fill_manual(values = LabelMapcolor(data$group)) +
  theme(text = element_text(size = 16), panel.grid.major=element_blank())
dev.off()

# calculating gene set enrichment scores for curated signatures
for(sam in names(Spatial.list)){
  print(sam)
  expr <- GetAssayData(object = Spatial.list[[sam]],
                       assay = "SCT",
                       slot = "data")
  stf.lt[[sam]] = GetGsetSigScore(expr = expr,
                        stf = stf.lt[[sam]],
                        category = "CuratedSig",
                        types = c("Immune", "Cancer"),
                        method = "AddModuleScore",
                        scale = F,
                        verbose = F)
  stf.lt[[sam]] = GetGsetSigScore(expr = expr,
                        stf = stf.lt[[sam]],
                        category = "MSigDB",
                        types = c("HALLMARK"),
                        method = "AddModuleScore",
                        scale = F,
                        verbose = F)
  # # Ligand-receptor interaction
  # LR_expression <- BuildLRExprssion(Expr = expr,
  #                                   LR_input = LR_input,
  #                                   na.rm = T)
  # st_pos <- Spatial.list[[sam]]@meta.data[, c("x", "y")]
  # nei.pairs <- FindNeispots(st_pos = st_pos,
  #                           r.dist = 2,
  #                           return.list = F)# calculating Euclidean Distance
  # dist <- nei.pairs[, "dist"]
  # names(dist) <- nei.pairs[, "spot2"]
  # reg.lt <- split(x = as.factor(dist),
  #                 f = nei.pairs[, "spot1"])
  #
  # LRscore <- CalLRIScore(reg.lt = reg.lt,
  #                        interaction_input = interaction_input,
  #                        LR_expression = LR_expression,
  #                        long.dist.method = "weighted",
  #                        adjust = 2,
  #                        na.rm = T,
  #                        p = 3, # parallel
  #                        verbose = T)
  # stf.lt[[sam]]@LRscore <- LRscore
}
# saveRDS(stf.lt, paste0(outdir, "stf.lt.rds"))
stf.lt <- readRDS(paste0(outdir, "stf.lt.rds"))
# BayesSpace cluster
# for (sam in names(Spatial.list)) {
#   se_cluster <- length(unique(Spatial.list[[sam]]$SCT_snn_res.0.8))
#   start <- ifelse((se_cluster - 6) < 3, 3, se_cluster - 6)
#   qs <- seq(start, se_cluster + 6)
#   sce <- BayesCluster(st = Spatial.list[[sam]],
#                       assay = "Spatial",
#                       platfrom = "Visium",
#                       outdir = paste0(outdir, "/BayesSpace/qplot/", sam, "_"),
#                       num.clu = NULL,
#                       qs = qs,
#                       verbose = T)
#   saveRDS(sce, paste0(outdir, "/BayesSpace/sce/", sam, "_sce.rds"))
#   stf.lt[[sam]]@Annotation <- data.frame(row.names = rownames(stf.lt[[sam]]@Position))
#   stf.lt[[sam]]@Annotation[, "seurat_res.0.8"] <- Spatial.list[[sam]]$SCT_snn_res.0.8
#   stf.lt[[sam]]@Annotation[, "bayes_cluster"] <- sce@colData@listData$spatial.cluster
#   #table(stf@Annotation[, "bayes_cluster"])
# }
# using before results
for (sam in names(Spatial.list)) {
  # print(sam)
  # print(c("before:", length(unique(Spatial.list[[sam]]$Bayes.cluster))))
  # print(c("new:", length(unique(stf.lt[[sam]]@Annotation[, "bayes_cluster"]))))
  #stf.lt[[sam]]@Annotation <- data.frame(row.names = rownames(stf.lt[[sam]]@Position))
  stf.lt[[sam]]@Annotation[, "bayes_cluster"] <- Spatial.list[[sam]]$Bayes.cluster
}
# plot
sam = "GSM5924033_ffpe_c_7"
# set size
sam.size <- rep(2.5,24)
names(sam.size) <- names(stf.lt)
sam.size[c("GSM5924043_frozen_a_3","GSM5924050_frozen_c_2")] <- 3.5
sam.size[c("GSM5924050_frozen_c_2","GSM5924049_frozen_b_18", "GSM5924038_ffpe_c_36","GSM5924042_frozen_a_1")] <- 3

for (sam in names(stf.lt)) {
  for (i in c("bayes_cluster", "seurat_res.0.8")) {
    anno <- as.character(stf.lt[[sam]]@Annotation[, i])
    anno <- paste0("domain_", anno)
    col <- LabelMapcolor(labels = as.character(anno))
    if (! dir.exists(paste0(outdir, "/ST_cluster/", i))) {
      dir.create(paste0(outdir, "/ST_cluster/", i), recursive = T)
    }
    SpotVisualize(pos = stf.lt[[sam]]@Position,
                  meta = anno,
                  size = sam.size[sam]-0.5,
                  legend.name = "Domains",
                  savefile = paste0(outdir, "/ST_cluster/", i, "/", sam, "_cluster.pdf"),
                  p.height = 7, p.width = 7,
                  cha.col = col,
                  title = sam)
  }
}

#saveRDS(stf.lt, paste0(outdir, "stf.lt.rds"))
#stf.lt <- readRDS(paste0(outdir, "stf.lt.rds"))
outdir <- "/NFS_home/NFS_home_2/chengxj/ST_scRNAseq/GSE175540/pipeline/"
## Tumor-Normal interface

for (sam in names(Spatial.list)) {
  print(sam)
  if (!dir.exists(paste0(outdir, "/TN_interface/", sam))) {
    dir.create(paste0(outdir, "/TN_interface/", sam))
  }
  cell.abun <- read.table(paste0("/home/chengxj/ST_scRNAseq/GSE175540/cell2location/ccRCC202212/", sam,"/", sam, ".cell.abundance.txt"),
                          sep = "\t", header = T, row.names = 1)
  colnames(cell.abun) <- substr(colnames(cell.abun), 24, nchar(colnames(cell.abun)))
  abun.all <- log2(rowSums(cell.abun)+1)
  abun.all <- abun.all/max(abun.all)
  cell.abun <- cell.abun/rowSums(cell.abun)
  ES <- cell.abun$RCC
  ES <- ES*abun.all
  ES <- ES/max(ES)
  SpotVisualize(st = Spatial.list[[sam]],
                meta = ES,
                savefile = paste0(outdir, "/TN_interface/", sam, "/tumor_abundance.pdf"),
                #limits = c(0, 1),
                p.height = 8, p.width = 8, size = 2.8,
                num.high = "#a4161a", num.mid = "#fcf5c7", num.low = "#0077b6",
                title = "Tumor abundance")
  edge_score <- TedgeScore(ES = ES,
                           st_pos = stf.lt[[sam]]@Position,
                           cluster = stf.lt[[sam]]@Annotation$bayes_cluster,
                           r.dist = 2)
  SpotVisualize(st = Spatial.list[[sam]],
                meta = edge_score,
                savefile = paste0(outdir, "/TN_interface/", sam, "/edge_score.pdf"),
                limits = c(0,0.5),
                p.height = 8, p.width = 8,#size = 2.8,
                num.high = "#a4161a",  num.mid = "#e5614b", num.low = "#ced4da", title = "Edge.score")
  stf.lt[[sam]]@Annotation[, "edge_score"] <- edge_score[rownames(stf.lt[[sam]]@Position)]
  # define the boundary spots using edge_score
}


maxval <- rep(0.08, 24) %>% setNames(names(stf.lt))
minval <- rep(0.03, 24) %>% setNames(names(stf.lt))
# maxval["GSM5924037_ffpe_c_34"] <- 0.22
# minval["GSM5924037_ffpe_c_34"] <- 0.11
# maxval[c("GSM5924036_ffpe_c_21")] <- 0.16
# maxval[c("GSM5924037_ffpe_c_34", "GSM5924038_ffpe_c_36", "GSM5924039_ffpe_c_39", "GSM5924041_ffpe_c_51",
#          "GSM5924045_frozen_a_17", "GSM5924046_frozen_b_1", "GSM5924047_frozen_b_7", "GSM5924048_frozen_b_13", "GSM5924043_frozen_a_3",
#          "GSM5924049_frozen_b_18", "GSM5924050_frozen_c_2","GSM5924051_frozen_c_5","GSM5924052_frozen_c_23")] <- 0.3
# minval[c("GSM5924033_ffpe_c_7", "GSM5924034_ffpe_c_10", "GSM5924035_ffpe_c_20")] <- 0.07
# minval[c("GSM5924038_ffpe_c_36", "GSM5924039_ffpe_c_39", "GSM5924041_ffpe_c_51", "GSM5924044_frozen_a_15",
#          "GSM5924046_frozen_b_1", "GSM5924047_frozen_b_7")] <- 0.1
# minval[c("GSM5924040_ffpe_c_45", "GSM5924045_frozen_a_17", "GSM5924048_frozen_b_13","GSM5924049_frozen_b_18", "GSM5924043_frozen_a_3",
#          "GSM5924050_frozen_c_2", "GSM5924051_frozen_c_5","GSM5924052_frozen_c_23")] <- 0.18
# boun.nei.n = 3 for GSM5924037_ffpe_c_34
# connect.dist = 4 for GSM5924047_frozen_b_7
for (sam in names(Spatial.list)) {
  print(sam)
  boun_reg <- BounRegDefine(x = stf.lt[[sam]]@Annotation[, "edge_score"],
                            st_pos = stf.lt[[sam]]@Position,
                            r.dist = 2,
                            maxval = maxval[sam],
                            minval = minval[sam],
                            max.clu.pt = 0.75,
                            boun.nei.n = 2,
                            candi.step = 1,
                            min.spots = 10,
                            verbose = T)
  SpotVisualize(pos = stf.lt[[sam]]@Position,
                meta = boun_reg[rownames(stf.lt[[sam]]@Position)],
                p.height = 8, p.width = 8,
                savefile = paste0(outdir, "/TN_interface/", sam, "/defined_boundary", minval[sam], "_", maxval[sam],".pdf"),
                limits = c(0,1),
                cha.col = c(boun = "#e76f51", nonboun = "#ced4da"),
                title = paste0("Defined TN interface; cut ", maxval[sam], "_", minval[sam]))
  stf.lt[[sam]]@Annotation[, "boun_reg"] <- boun_reg[rownames(stf.lt[[sam]]@Position)]
  # p1 <- SpotVisualize(pos = stf.lt[[sam]]@Position,
  #                    meta = Norm01(stf.lt[[sam]]@CellEnrich$RCC),
  #                    return = T,
  #                    limits = c(0,1),
  #                    num.high = "#c32f27", num.mid = "lightyellow", num.low = "#0077b6",
  #                    title = "TN interface")
  # p2 <- geom_point(data = data.frame(stf.lt[[sam]]@Position[stf.lt[[sam]]@Annotation[, "boun_reg"] == "boun", ]), aes(x= x, y = y),
  #                  shape = 1, size = 2.5, colour = "black", stroke = 1, show.legend = T)
  # pdf(paste0(outdir, "/TN_interface/", sam, "/defined_boundary_withabun.pdf"), width = 8, height = 8)
  # print(p1 + p2)
  # dev.off()
}
#
st = SetIdent(Spatial.list[[sam]], value="boun_reg")
pdf(paste0(outdir, "/TN_interface/", sam, "/image_boundary.pdf"))
SpatialDimPlot(st, cells.highlight = list(colnames(st)[st$boun_reg=="boun"]), cols.highlight = c("#c32f27", "#ced4da"), pt.size.factor = 0.9, alpha = 1)
dev.off()
st = st[,st$boun_reg=="boun"]
pdf(paste0(outdir, "/TN_interface/", sam, "/image_only_boundary.pdf"))
SpatialDimPlot(st, cells.highlight = list(colnames(st)[st$boun_reg=="boun"]), cols.highlight = c("#c32f27", "#ced4da"), pt.size.factor = 0.9, alpha = 1, stroke = NA)
dev.off()
#
nei.dist <- rep(4, 24) %>% setNames(names(stf.lt))
#nei.dist["GSM5924033_ffpe_c_7"] <- 3
#nei.dist["GSM5924046_frozen_b_1"] <- 6
for (sam in names(Spatial.list)) {
  print(sam)
  spot_label = stf.lt[[sam]]@Annotation$bayes_cluster
  names(spot_label) <- rownames(stf.lt[[sam]]@Position)
  boun_reg <- stf.lt[[sam]]@Annotation[, "boun_reg"]
  if (length(which(boun_reg == "boun")) ==0) {
    alltype <- rep("others", length(boun_reg))
  } else {
    names(boun_reg) <- rownames(stf.lt[[sam]]@Position)
    bountype <- BounType(boun.reg = names(boun_reg)[boun_reg == "boun"],
                         st_pos = stf.lt[[sam]]@Position,
                         min.type.spots = 1,
                         nei.dist = nei.dist[sam],
                         spot_label = spot_label)
    alltype <- rep("others", length(boun_reg))
    names(alltype) <- names(boun_reg)
    alltype[names(bountype)] <- bountype
  }
  stf.lt[[sam]]@Annotation[, "boun_type"] <- alltype
  col <- LabelMapcolor(labels = alltype,
                       assgin.col = c(others = "#ced4da"))
  SpotVisualize(pos = stf.lt[[sam]]@Position,
                meta = alltype,
                savefile = paste0(outdir, "/TN_interface/", sam, "/boun_type.pdf"),
                p.height = 7.5, p.width = 8,
                cha.col = col,
                title = "Tumor-Normal boundary type")
  # boun cluster
  clu <- as.character(stf.lt[[sam]]@Annotation[, "bayes_cluster"])
  clu[alltype == "others"] = "others"
  col <- LabelMapcolor(labels = clu,
                       assgin.col = c(others = "#ced4da"))
  SpotVisualize(pos = stf.lt[[sam]]@Position,
                meta = clu,
                savefile = paste0(outdir, "/TN_interface/", sam, "/bayes_cluster.pdf"),
                p.height = 7.5, p.width = 8,
                cha.col = col,
                title = "bayes_cluster")
  # boun_class
  if (all(alltype == "others")) {
    boun_class <- rep("others", length(boun_reg))
  } else {
    boun_class <- BounClass(boun.type = stf.lt[[sam]]@Annotation$boun_type,
                            spot.clu = stf.lt[[sam]]@Annotation$bayes_cluster,
                            ES = stf.lt[[sam]]@CellEnrich$RCC)
  }
  col <- LabelMapcolor(labels = boun_class,
                       assgin.col = c(others = "#ced4da"))
  SpotVisualize(pos = stf.lt[[sam]]@Position,
                meta = boun_class,
                savefile = paste0(outdir, "/TN_interface/", sam, "/boun_class.pdf"),
                p.height = 7.5, p.width = 8,
                cha.col = col,
                title = "Tumor-Normal boundary class")
  stf.lt[[sam]]@Annotation[, "boun_class"] <- boun_class
}
saveRDS(stf.lt, paste0(outdir, "stf.lt.rds"))
stf.lt <- readRDS(paste0(outdir, "stf.lt.rds"))
# bayes cluster
clu <- as.character(stf.lt[[sam]]@Annotation[, "bayes_cluster"])
clu[alltype == "others"] = "others"
col <- LabelMapcolor(labels = clu,
                     assgin.col = c(others = "#ced4da"))
names(col) <- paste0("clu_", names(col))
SpotVisualize(pos = stf.lt[[sam]]@Position,
              meta = paste0("clu_", as.character(stf.lt[[sam]]@Annotation[, "bayes_cluster"])),
              savefile = paste0(outdir, "/TN_interface/", sam, "/bayes_cluster_all.pdf"),
              p.height = 7.5, p.width = 8,
              cha.col = col,
              title = "BayesSpace clusters")
# plot all samples
# pdf(paste0(outdir, "/TN_interface/edge_score_allsamples2.pdf"), width = 40, height = 8)
# par(nfrow = c(5,5))
for(sam in names(Spatial.list)) {
  pdf(paste0(outdir, "/TN_interface/edge_TNI_all/",sam , ".pdf"), width = 40, height = 8)
  par(mfrow = c(5,5))
  p1 <- SpotVisualize(st = Spatial.list[[sam]],
                meta = stf.lt[[sam]]@Annotation[, "edge_score"],
                return = T,
                size = sam.size[sam],
                legend.name = "TNI scores",
                p.height = 8, p.width = 8,
                limits = c(0,0.5),
                num.high = "#a4161a",  num.mid = "#e5614b", num.low = "#ced4da", title = sam)
  bounreg <- stf.lt[[sam]]@Annotation[, "boun_reg"]
  bounreg <- gsub("nonboun", "nboun", bounreg)
  p2 <- SpotVisualize(pos = stf.lt[[sam]]@Position,
                      meta = bounreg,
                      p.height = 8, p.width = 8,
                      size = sam.size[sam],
                      legend.name = "label",
                      #savefile = paste0(outdir, "/TN_interface/", sam, "/defined_boundary", minval[sam], "_", maxval[sam],".pdf"),
                      limits = c(0,1),
                      return = T,
                      cha.col = c(boun = "#e76f51", nboun = "#ced4da"),
                      title = paste0("Defined TNI; cut ",minval[sam] , "_", maxval[sam]))
  col <- LabelMapcolor(labels = stf.lt[[sam]]@Annotation[, "boun_type"],
                       assgin.col = c(others = "#ced4da"))
  p3 <- SpotVisualize(pos = stf.lt[[sam]]@Position,
                      meta = stf.lt[[sam]]@Annotation[, "boun_type"],
                      size = sam.size[sam],
                      legend.name = "label",
                      #savefile = paste0(outdir, "/TN_interface/", sam, "/boun_type.pdf"),
                      p.height = 8, p.width = 8,
                      cha.col = col,
                      return = T,
                      title = "TNI types")
  cell.abun <- read.table(paste0("/home/chengxj/ST_scRNAseq/GSE175540/cell2location/ccRCC202212/", sam,"/", sam, ".cell.abundance.txt"),
                          sep = "\t", header = T, row.names = 1)
  colnames(cell.abun) <- substr(colnames(cell.abun), 24, nchar(colnames(cell.abun)))
  abun.all <- log2(rowSums(cell.abun)+1)
  abun.all <- abun.all/max(abun.all)
  cell.abun <- cell.abun/rowSums(cell.abun)
  ES <- cell.abun$RCC
  ES <- ES*abun.all
  ES <- ES/max(ES)
  p4 <- AbunBounPlot(st = Spatial.list[[sam]],
                     abun = ES,
                     return = T,
                     size = sam.size[sam],
                     type = stf.lt[[sam]]@Annotation[, "boun_reg"],
                     #savefile = paste0(outdir, "/TN_interface/", sam, "/defined_boundary.pdf"),
                     p.height = 8, p.width = 8,
                     line_col = c("boun" = "black", "nonboun" = NA))
  col <- LabelMapcolor(labels = stf.lt[[sam]]@Annotation[, "boun_class"],
                       assgin.col = c(others = "#ced4da"))
  p5 <- SpotVisualize(pos = stf.lt[[sam]]@Position,
                      meta = stf.lt[[sam]]@Annotation[, "boun_class"],
                      size = sam.size[sam],
                      legend.name = "label",
                      #savefile = paste0(outdir, "/TN_interface/", sam, "/boun_class.pdf"),
                      p.height = 8, p.width = 8,
                      cha.col = col,
                      return = T,
                      title = "TNI classes")
  plot = cowplot::plot_grid(plotlist = list(p1,p2,p3,p4,p5), ncol = 5)
  print(plot)
  dev.off()
}
## boun with image
for (sam in names(Spatial.list)){
  stf <- stf.lt[[sam]]
  st <- AddMetaData(Spatial.list[[sam]], metadata = stf@Annotation[, "boun_reg"], col.name = "boun_reg")
  st = SetIdent(st, value="boun_reg")
  temp = st[,stf@Annotation$boun_class != "others"]
  pdf(paste0(outdir, "/TN_interface/image_TNI/",sam, "_image_boundary.pdf"))
  p <- SpatialDimPlot(temp, crop = F,
                 cells.highlight = list(T_boun = rownames(stf@Annotation)[stf@Annotation$boun_class == "T_boun"],
                                        N_boun = rownames(stf@Annotation)[stf@Annotation$boun_class == "N_boun"]),
                 cols.highlight = c(T_boun="#c32f27",N_boun = "#f9c74f"), pt.size.factor = 0.9, alpha = 1, stroke = NA)
  print(p)
  dev.off()
}
# tumor distribution in boun
theme.set <- theme(
  panel.grid.major.y=element_blank(),
  panel.grid.minor.y=element_blank(),
  panel.background = element_blank(),
  axis.text.x = element_text(hjust = 0.5),
  plot.title=element_text(hjust =0.5, size = 12),
  axis.line.y=element_line(linetype=1,color='black'),
  axis.line.x=element_line(linetype=1,color='black'),
  legend.text=element_text(size=12),
  legend.title = element_text(size=14),
  axis.text=element_text(size=14),
  axis.title.y = element_blank(),
  axis.title.x = element_blank()
)
library(ggpubr)
for(sam in names(stf.lt)){
  cell.abun <- read.table(paste0("/home/chengxj/ST_scRNAseq/GSE175540/cell2location/ccRCC202212/", sam,"/", sam, ".cell.abundance.txt"),
                          sep = "\t", header = T, row.names = 1)
  colnames(cell.abun) <- substr(colnames(cell.abun), 24, nchar(colnames(cell.abun)))
  abun.all <- log2(rowSums(cell.abun)+1)
  abun.all <- abun.all/max(abun.all)
  cell.abun <- cell.abun/rowSums(cell.abun)
  ES <- cell.abun$RCC
  ES <- ES*abun.all
  ES <- ES/max(ES)
  # p1 <- SpotVisualize(pos = stf.lt[[sam]]@Position,
  #                    meta = ES,
  #                    size = sam.size[sam],
  #                    return = T)
  # data2 <- cbind(stf.lt[[sam]]@Position, Class = stf.lt[[sam]]@Annotation[, "boun_class"])
  # data2 <- data2[data2$Class != "others", ]
  # p2 <- geom_point(data = data2[data2$Class=="T_boun",],
  #                  aes(x= x, y = y), shape = 21,
  #                 size = sam.size[sam], fill = "#e85d04", stroke = 0.6,
  #                 color = "black",show.legend = T)
  # p3 <- geom_point(data = data2[data2$Class=="N_boun",],
  #                  aes(x= x, y = y), shape = 21, stroke = 0.6,
  #                  size = sam.size[sam], fill = "#4f772d",
  #                  color = "black",show.legend = T)
  AbunTNIPlot(pos = stf.lt[[sam]]@Position,
              ES = ES, stroke = 1, shape = 1,
              size = sam.size[sam],color = c(T_boun = "#e85d04", N_boun = "#4f772d"),
              class = stf.lt[[sam]]@Annotation[, "boun_class"],
              title = sam,
              legend.name = "Abundance",
              legend.key.size = unit(10, "mm"),
              savefile = paste0(outdir, "/TN_interface/Abun_TNI_1/", sam, "_abun_TNI.pdf"))
  # pdf(paste0(outdir, "/TN_interface/Abun_TNI/", sam, "_abun_TNI.pdf"), height = 8, width = 8)
  # print(p1 + p2 +p3)
  # dev.off()
  data <- data.frame(Abundances = ES,
                     stf.lt[[sam]]@Annotation[names(ES), c("boun_reg","boun_class")])
  col <- c(others = "#ced4da", T_boun = "#e9724c", N_boun = "#336699")
  SpotVisualize(pos = stf.lt[[sam]]@Position,
                meta = data$boun_class,
                size = sam.size[sam],
                legend.name = "Class",
                savefile = paste0(outdir, "/TN_interface/Abun_TNI_1/Class/", sam, ".pdf"),
                p.height = 8, p.width = 8,
                cha.col = col,
                return = T,
                title = sam)
  data <- data[data$boun_class != "others",]
  if(nrow(data) > 0){
    stat.test <- data %>%
      wilcox_test(Abundances ~ boun_class) %>%
      add_significance("p") %>% add_x_position(x = "boun_class")
    pdf(paste0(outdir, "/TN_interface/Abun_TNI_1/boxplot/", sam, ".pdf"), width = 4, height = 3)
    p <- ggplot(data = data, aes(y = Abundances, x = boun_class)) +
      geom_boxplot(aes(fill = boun_class))  +
      theme.set +
      stat_pvalue_manual(stat.test, y.position = c(max(data$Abundances)+0.1), tip.length = 0.01, size = 7) +
      scale_fill_manual(values = c("#336699", "#e9724c"))
    print(p)
    dev.off()
  }
}
# TLS annotation
for(sam in names(Spatial.list)){
  if("TLSanno" %in% colnames(Spatial.list[[sam]]@meta.data)){
    anno <- Spatial.list[[sam]]$TLSanno
    anno[nchar(anno)==0] = "NO_TLS"
    # some nonTLS spot lost label
    anno[is.na(anno)] = "NO_TLS"
    anno[anno=="T_agg"] = "NO_TLS"
  } else {
    anno <- rep("NO_anno", ncol(Spatial.list[[sam]]))
  }
  stf.lt[[sam]]@Annotation[, "TLS_anno"] <- anno
}

# TLS prediction
TLS.fea <- readRDS("/NFS_home/NFS_home_2/chengxj/ST_scRNAseq/Files/TLS/TLS.fea.rds")
model <- readRDS("/NFS_home/NFS_home_2/chengxj/ST_scRNAseq/Files/TLS/model.final.rds")
library(xgboost)
for(sam in names(TLS.fea)){
  xdata <- as.matrix(TLS.fea[[sam]]$sig.fea)
  xdata <- xdata[, intersect(colnames(xdata), model$feature_names)]
  add.fea <- setdiff(model$feature_names, colnames(xdata))
  if (length(add.fea) > 0){
    xdata <- cbind(xdata, matrix(0, nrow = nrow(xdata), ncol = length(add.fea),
                                 dimnames = list(rownames(xdata), add.fea)))
  }
  xdata <- xdata[, model$feature_names]
  xgbData <- xgb.DMatrix(data = xdata)
  pred_test <- predict(model, xgbData)
  names(pred_test) <- rownames(xdata)
  stf.lt[[sam]]@Annotation[, "TLSpred"] <- pred_test
  pdf(paste0(outdir, "TLS/", sam, ".pdf"), width = 7, height = 7)
  SpotVisualize(pos = stf.lt[[sam]]@Position,
                meta = pred_test,size = 2.8, limits = c(0,1))
  dev.off()
}
# phenotype score
cancer <- "KIRC"
nmf.lt <- readRDS(paste0("~/ST_scRNAseq/Files/TCGA/TCGA_NMF/", cancer, "/nmf.lt.rds"))
# re-plot meta gene enrichment
br <- c("pos" = "5", "neg" = "7")
num <- 50
for(type in c("pos", "neg")) {
  savedir <- paste0(outdir, "/PhenoScore/", type)
  best_rank <- br[type]
  nmf <- nmf.lt[[type]]$nmf$nmf$fit[[best_rank]]
  W <- basis(nmf)
  #W_type <- nmf.lt[[type]]$W_type
  #colnames(W) <- paste0(names(W_type), "_", W_type)
  # pdf(paste0(savedir, "/nmf_consensusplot.pdf"))
  # consensusmap(nmf)
  # dev.off()
  mg_vt <- FactorMetagenes(ref_W = W,
                           method = "top",
                           top_num = num,
                           plot = T,
                           sd_n = 1.95,
                           plotfile = paste0(savedir, "/factor_metagenes_top", num,".pdf")
                           )
  mg_lt <- split(x = names(mg_vt), f = mg_vt)
  ## enrichment analysis of metagenes
  pdf(paste0(savedir, "/factor_enrichPathway_top", num,".pdf"), width = 10, height = 12)
  mg_enrich <- FactorEnrichAnalysis(mg_vt = mg_vt,
                                    pvalueCutoff = 0.05,
                                    show_num = 5,
                                    fun = "enrichPathway",
                                    qvalueCutoff = 0.2,
                                    #OrgDb = 'org.Hs.eg.db',
                                    #fun = "enrichGO", ont = "ALL",
                                    pAdjustMethod = "none"
  )
  dev.off()
}
# cox plot
library(survival)
library(survminer)
#
dataset <- readRDS(paste0("/NFS_home/NFS_home_2/chengxj/ST_scRNAseq/Files/TCGA/TCGAxenaGDC/TCGA_KIRC.rds"))
names(dataset)[1:3] <- str_split_fixed(names(dataset)[1:3], "\\.", 3)[, 3]
Expr_TPM <- dataset[["htseq_log2TPM"]]
# phenotype
phenotype <- as.data.frame(dataset$survival.tsv)
rownames(phenotype) <- phenotype$sample
phenotype <- phenotype[, c("OS", "OS.time")]
colnames(phenotype) <- c("status", "time")
phenotype$time <- phenotype$time/(365.24/12) %>% round(4)
cox.coef <- c()
for(type in c("pos", "neg")) {
  savedir <- paste0(outdir, "/PhenoScore/", type, "/SurvPlot/")
  if (! dir.exists(savedir)){
    dir.create(savedir, recursive = T)
  }
  best_rank <- br[type]
  nmf <- nmf.lt[[type]]$nmf$nmf$fit[[best_rank]]
  H <- nmf@fit@H
  for (i in rownames(H)) {
    group <- ifelse(H[i,] > mean(H[i,]), "High_Score", "Low_Score")
    data <- merge(phenotype, data.frame(group), by = 0)
    # fit_os <- survfit(Surv(time, status) ~ group, data = data)
    # pdf(file = paste0(savedir, i, "_surv.pdf"),height = 6,width = 6, onefile = F)
    # plot <- ggsurvplot(fit = fit_os, data = data, pval=TRUE, legend.title = paste0(type, "_", i), legend = c(0.8,0.9), palette =c("#c32f27", "#336699"),
    #                    size=1.5, pval.size=7, #legend.labs=c(paste("High (n=",num["High"],")",sep=""),paste("Low (n=",num["Low"],")",sep="")),
    #                    # xlab="Months",ylab="Probability of overall survival",
    #                 ggtheme=theme(text = element_text(size=19), legend.text = element_text(size=16),
    #                               axis.text = element_text(color="black",size=20),legend.direction = "vertical",
    #                               panel.background=element_rect(fill='transparent'),
    #                               axis.line=element_line(color="black",size=0.6),plot.margin=unit(rep(1.5,4), 'lines')))
    # print(plot)
    # dev.off()
    # cox
    factor <- data.frame(factor = scale(H[i,]))
    data <- merge(phenotype, factor, by = 0)
    cox = suppressWarnings(coxph(Surv(time, status) ~ factor, data = data))
    coef = summary(cox)$coefficients[c(1,5)]
    c.index = cox$concordance["concordance"]
    cox.coef <- rbind(c(paste0(type, "_", i), type, coef, c.index), cox.coef)
  }
}
theme.set <- theme(
  panel.grid.major.y=element_blank(),
  panel.grid.minor.y=element_blank(),
  panel.background = element_blank(),
  #axis.text.x = element_text(angle = 45, hjust = 1),
  plot.title=element_text(hjust =0.5, size = 12),
  axis.line.y=element_line(linetype=1,color='grey'),
  axis.line.x=element_line(linetype=1,color='grey'),
  #axis.ticks = element_line(linetype=2,color='grey'),
  #panel.grid=element_line(linetype=2,color='grey'),
  legend.text=element_text(size=12),
  text=element_text(size=16)
)
colnames(cox.coef) <- c("factor", "type","coef", "coef.p", "c.index")
cox.coef <- data.frame(cox.coef)
cox.coef[, "Hazard ratios"] <- exp(as.numeric(cox.coef$coef))
cox.coef[, "xstart"] <- 1
cox.coef$coef.p <- as.numeric(cox.coef$coef.p)
cox.coef <- add_significance(cox.coef, "coef.p", output.col = "Significance")
cox.coef$Significance <- factor(cox.coef$Significance, levels = c("ns", "*","**","***","****"))
pdf("/NFS_home/NFS_home_2/chengxj/ST_scRNAseq/GSE175540/pipeline/PhenoScore/Hazard.ratios_factors.pdf", width = 6, height = 5)
ggplot(data = cox.coef) + geom_point(aes(x = `Hazard ratios`, y = factor, color = type,size = Significance)) +
  geom_segment(aes(x = xstart, xend = `Hazard ratios`, y = factor, yend = factor)) +
  theme.set + #xlim(0, 2.5) +
  scale_color_manual(values = c("pos" = "#c32f27", "neg" = "#336699")) +
  geom_vline(xintercept = 1) +
  theme(plot.margin = margin(l = 20, t = 10, b = 10)) +
  scale_size_manual(values = c(1,3,4,5,6), labels = c("ns", "*", "**", "***", "****"), drop = FALSE)
dev.off()

# phenotype <- phenotype[colnames(H),]
# group1 <- ifelse(H[4,] > quantile(H[4,])[4], "High_Score", "Low_Score")
# group2 <- ifelse(H[7,] > quantile(H[7,])[4], "High_Score", "Low_Score")
# data <- cbind(phenotype, group1, group2)
# fit_os <- survfit(Surv(time, status) ~ group1 + group2, data = data)
# ggsurvplot(fit = fit_os, data = data, pval=TRUE,
#            size=1.5, pval.size=7, #legend.labs=c(paste("High (n=",num["High"],")",sep=""),paste("Low (n=",num["Low"],")",sep="")),
#            # xlab="Months",ylab="Probability of overall survival",
#            ggtheme=theme(text = element_text(size=19), legend.text = element_text(size=16),
#                          axis.text = element_text(color="black",size=20),legend.direction = "vertical",
#                          panel.background=element_rect(fill='transparent'),
#                          axis.line=element_line(color="black",size=0.6),plot.margin=unit(rep(1.5,4), 'lines')))
#
# prediction in ST
nmf_pred.lt <- readRDS("/NFS_home/NFS_home_2/chengxj/ST_scRNAseq/GSE175540/combBulk/TCGA_Cox/nmf_pred.lt.rds")
for (sam in names(stf.lt)) {
  a1 <- nmf_pred.lt$neg[[sam]]@fit@H
  rownames(a1) <- paste0("neg_", rownames(a1))
  a2 <- nmf_pred.lt$pos[[sam]]@fit@H
  rownames(a2) <- paste0("pos_", rownames(a2))
  stf.lt[[sam]]@PhenoScore <- data.frame(t(rbind(a1,a2)), check.names = F)
}
saveRDS(stf.lt, paste0(outdir, "stf.lt.rds"))
## plot three factors in GSM5924033_ffpe_c_7
library(rstatix)
library(ggpubr)
score <- stf.lt$GSM5924033_ffpe_c_7@PhenoScore
score <- apply(score, 2, Norm01)
#score <- data.frame(score, boun_reg = stf.lt[[sam]]@Annotation$boun_class)
score <- data.frame(score, boun_reg = stf.lt[[sam]]@Annotation$boun_reg)
#data <- subset(score, boun_reg != "others")
data <- score[, c(8:11, 12)]
colnames(data)[1:4] <- str_split_fixed(colnames(data)[1:4], "_", 2)[, 2]
meltData <- reshape2::melt(data)
stat.test <- meltData %>%
  group_by(variable) %>%
  wilcox_test(value ~ boun_reg) %>%
  adjust_pvalue(method = "bonferroni") %>%
  add_significance("p.adj") %>%
  add_x_position(x = "variable")
#pdf(paste0(outdir, "/PhenoScore/neg/boxplot_Nboun_Tboun_factors.pdf"), width = 8, height = 6)
pdf(paste0(outdir, "/PhenoScore/pos/boxplot_boun_nonboun_factors.pdf"), width = 6, height = 4)
ggplot(meltData,aes(x = variable, y = value)) +
  geom_boxplot(aes(fill = boun_reg)) + stat_pvalue_manual(stat.test, y.position = 1) + theme_bw() +
  scale_fill_manual(values = c("#b95b13", "#0077b6")) + theme(text = element_text(size = 15))
dev.off()


save(list = ls(all.names = T),
     file = paste0(outdir, "/pipeline.RData"))
